import {app, BrowserWindow, contextBridge, ipcMain, ipcRenderer} from 'electron';
import {SqliteHelper} from "./helper/sqliteHelper";
import {
  DELETE_NETWORKS_EVENT,
  GET_NETWORKS_EVENT,
  GET_PASSWORD_EVENT,
  SAVE_NETWORKS_EVENT,
  SAVE_PASSWORD_EVENT,
  VERIFY_PASSWORD_EVENT
} from "./utils/BridgeUtil";
import {Network} from "./entities/network";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const dbHelper = new SqliteHelper();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.handle(GET_PASSWORD_EVENT, async (event, someArgument) => {
    return await dbHelper.getPasswordHash();
  })

  ipcMain.handle(SAVE_PASSWORD_EVENT, async (event, someArgument) => {
    await dbHelper.savePassword(someArgument.password);
    await dbHelper.saveMnemonic(someArgument.mnemonic ,someArgument.password);
    return true
  })

  ipcMain.handle(VERIFY_PASSWORD_EVENT, async (event, password) => {
    return await dbHelper.verifyPassword(password);
  })

  ipcMain.handle(GET_NETWORKS_EVENT, async (event, args) => {
    return await dbHelper.getNetworks();
  })

  ipcMain.handle(SAVE_NETWORKS_EVENT, async (event, nw) => {
    return await dbHelper.saveNetwork(nw as Network)
  })

  ipcMain.handle(DELETE_NETWORKS_EVENT, async (event, id) => {
    return await dbHelper.deleteNetwork(Number(id))
  })

};

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
